# Grafana 数据源配置
# 定义 Prometheus 和其他数据源

apiVersion: 1

# 数据源列表
datasources:
  # 主要 Prometheus 数据源
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    uid: prometheus-main
    version: 1
    editable: true
    jsonData:
      httpMethod: POST
      timeInterval: "15s"
      queryTimeout: "300s"
      defaultRegion: "local"
      customQueryParameters: ""
      manageAlerts: true
      alertmanagerUid: ""
      exemplarTraceIdDestinations:
        - name: trace_id
          datasourceUid: jaeger
    secureJsonData: {}

  # Elasticsearch 日志数据源
  - name: Elasticsearch
    type: elasticsearch
    access: proxy
    url: http://elasticsearch:9200
    database: "logstash-*"
    uid: elasticsearch-main
    version: 1
    editable: true
    jsonData:
      interval: "Daily"
      timeField: "@timestamp"
      esVersion: "8.0.0"
      maxConcurrentShardRequests: 5
      logMessageField: "message"
      logLevelField: "level"
      includeFrozen: false
    secureJsonData: {}

  # 测试数据源（开发环境使用）
  - name: TestData
    type: testdata
    uid: testdata
    version: 1
    access: proxy
    editable: true
    jsonData: {}

  # Jaeger 链路追踪数据源（可选）
  - name: Jaeger
    type: jaeger
    access: proxy
    url: http://jaeger:16686
    uid: jaeger
    version: 1
    editable: true
    jsonData:
      tracesToLogsV2:
        datasourceUid: "elasticsearch-main"
        tags:
          - key: "service.name"
            value: "service"
          - key: "span.id"
            value: "span_id"
        filterByTraceID: true
        filterBySpanID: true
        customQuery: false
        query: ""
      tracesToMetrics:
        datasourceUid: "prometheus-main"
        tags:
          - key: "service.name"
            value: "service"
          - key: "operation"
            value: "operation"
        queries:
          - name: "Request rate"
            query: "rate(http_requests_total[5m])"
          - name: "Request duration"
            query: "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))"
    secureJsonData: {}

  # Loki 日志聚合数据源（可选）
  - name: Loki
    type: loki
    access: proxy
    url: http://loki:3100
    uid: loki
    version: 1
    editable: true
    jsonData:
      derivedFields:
        - datasourceUid: jaeger
          matcherRegex: "trace_id=(\\w+)"
          name: "TraceID"
          url: "$${__value.raw}"
        - datasourceUid: prometheus-main
          matcherRegex: "service=([^,]+)"
          name: "Service"
          url: ""
      maxLines: 1000
    secureJsonData: {}

  # PostgreSQL 数据库直连（仅开发环境）
  - name: PostgreSQL
    type: postgres
    access: proxy
    url: postgres:5432
    database: "${POSTGRES_DB:-mindora_dev}"
    user: "${POSTGRES_USER:-mindora_user}"
    uid: postgres-main
    version: 1
    editable: true
    jsonData:
      sslmode: "disable"
      maxOpenConns: 10
      maxIdleConns: 2
      connMaxLifetime: 300
      postgresVersion: 1600
      timescaledb: false
    secureJsonData:
      password: "${POSTGRES_PASSWORD:-mindora_password_change_me}"

  # Redis 指标（通过 Prometheus）
  - name: Redis
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    uid: redis-metrics
    version: 1
    editable: true
    jsonData:
      httpMethod: POST
      timeInterval: "15s"
      customQueryParameters: "job=redis"
      exemplarTraceIdDestinations: []
    secureJsonData: {}

  # MinIO 指标（通过 Prometheus）  
  - name: MinIO
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    uid: minio-metrics
    version: 1
    editable: true
    jsonData:
      httpMethod: POST
      timeInterval: "30s"
      customQueryParameters: "job=minio"
      exemplarTraceIdDestinations: []
    secureJsonData: {}

  # 自定义指标数据源
  - name: Custom Metrics
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    uid: custom-metrics
    version: 1
    editable: true
    jsonData:
      httpMethod: POST
      timeInterval: "15s"
      customQueryParameters: "job=mindora-sdk"
      exemplarTraceIdDestinations: []
    secureJsonData: {}