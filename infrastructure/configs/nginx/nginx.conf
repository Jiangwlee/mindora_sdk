# Mindora SDK 基础设施 Nginx 主配置文件
# 提供统一的反向代理和负载均衡

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 优化worker进程配置
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # 基础配置
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # JSON格式日志（用于日志分析）
    log_format json_analytics escape=json '{'
                                '"time": "$time_iso8601",'
                                '"remote_addr": "$remote_addr",'
                                '"remote_user": "$remote_user",'
                                '"request": "$request",'
                                '"status": $status,'
                                '"body_bytes_sent": $body_bytes_sent,'
                                '"request_time": $request_time,'
                                '"upstream_response_time": "$upstream_response_time",'
                                '"upstream_connect_time": "$upstream_connect_time",'
                                '"upstream_header_time": "$upstream_header_time",'
                                '"http_referrer": "$http_referer",'
                                '"http_user_agent": "$http_user_agent",'
                                '"http_x_forwarded_for": "$http_x_forwarded_for"'
                            '}';

    access_log /var/log/nginx/access.log main;

    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # 缓冲区设置
    client_body_buffer_size 128k;
    client_max_body_size 100m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # SSL配置（生产环境）
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # 上游服务定义
    upstream grafana {
        server grafana:3000;
        keepalive 32;
    }

    upstream prometheus {
        server prometheus:9090;
        keepalive 32;
    }

    upstream kibana {
        server kibana:5601;
        keepalive 32;
    }

    upstream consul {
        server consul:8500;
        keepalive 32;
    }

    upstream minio_api {
        server minio:9000;
        keepalive 32;
    }

    upstream minio_console {
        server minio:9001;
        keepalive 32;
    }

    upstream elasticsearch {
        server elasticsearch:9200;
        keepalive 32;
    }

    upstream qdrant {
        server qdrant:6333;
        keepalive 32;
    }

    upstream rabbitmq {
        server rabbitmq:15672;
        keepalive 32;
    }

    # 限制请求频率
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=management:10m rate=5r/s;

    # 默认服务器配置
    server {
        listen 80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
    }

    # 主要HTTPS服务器
    server {
        listen 443 ssl http2;
        server_name mindora.local localhost;

        # SSL证书配置（生产环境需要真实证书）
        ssl_certificate /etc/nginx/ssl/mindora.crt;
        ssl_certificate_key /etc/nginx/ssl/mindora.key;

        # 安全头设置
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # 根路径 - 显示服务导航页面
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Mindora Infrastructure Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; margin-bottom: 40px; }
        .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .service { padding: 20px; border: 1px solid #ddd; border-radius: 5px; background: #fff; }
        .service h3 { margin-top: 0; color: #2c5aa0; }
        .service a { color: #007bff; text-decoration: none; }
        .service a:hover { text-decoration: underline; }
        .status { display: inline-block; padding: 2px 8px; border-radius: 3px; color: white; font-size: 12px; }
        .status.running { background: #28a745; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🏗️ Mindora Infrastructure Dashboard</h1>
        <div class="services">
            <div class="service">
                <h3>📊 Grafana <span class="status running">RUNNING</span></h3>
                <p>监控和可视化仪表板</p>
                <a href="/grafana/" target="_blank">访问 Grafana →</a>
            </div>
            <div class="service">
                <h3>🔍 Kibana <span class="status running">RUNNING</span></h3>
                <p>日志分析和搜索</p>
                <a href="/kibana/" target="_blank">访问 Kibana →</a>
            </div>
            <div class="service">
                <h3>🔧 Consul <span class="status running">RUNNING</span></h3>
                <p>服务发现和配置管理</p>
                <a href="/consul/" target="_blank">访问 Consul →</a>
            </div>
            <div class="service">
                <h3>📈 Prometheus <span class="status running">RUNNING</span></h3>
                <p>指标收集和监控</p>
                <a href="/prometheus/" target="_blank">访问 Prometheus →</a>
            </div>
            <div class="service">
                <h3>🗄️ MinIO Console <span class="status running">RUNNING</span></h3>
                <p>对象存储管理控制台</p>
                <a href="/minio/" target="_blank">访问 MinIO Console →</a>
            </div>
            <div class="service">
                <h3>🐰 RabbitMQ <span class="status running">RUNNING</span></h3>
                <p>消息队列管理</p>
                <a href="/rabbitmq/" target="_blank">访问 RabbitMQ Management →</a>
            </div>
        </div>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }

        # Grafana 监控仪表板
        location /grafana/ {
            limit_req zone=management burst=20 nodelay;
            
            proxy_pass http://grafana/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;
        }

        # Prometheus 监控数据
        location /prometheus/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://prometheus/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Kibana 日志分析
        location /kibana/ {
            limit_req zone=management burst=20 nodelay;
            
            proxy_pass http://kibana/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_buffering off;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        # Consul 服务发现
        location /consul/ {
            limit_req zone=management burst=10 nodelay;
            
            proxy_pass http://consul/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # MinIO Console
        location /minio/ {
            limit_req zone=management burst=10 nodelay;
            
            proxy_pass http://minio_console/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # MinIO Console需要的特殊头
            proxy_set_header X-NginX-Proxy true;
            proxy_ssl_session_reuse off;
            proxy_redirect off;
        }

        # RabbitMQ Management
        location /rabbitmq/ {
            limit_req zone=management burst=10 nodelay;
            
            proxy_pass http://rabbitmq/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API端点路由
        location /api/ {
            limit_req zone=api burst=100 nodelay;
            
            # 根据API路径路由到不同服务
            location /api/storage/ {
                proxy_pass http://minio_api/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /api/search/ {
                proxy_pass http://elasticsearch/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /api/vector/ {
                proxy_pass http://qdrant/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 静态文件缓存
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
        }
    }

    # 包含额外的配置文件
    include /etc/nginx/conf.d/*.conf;
}