version: '3.8'

services:
  # 数据库服务
  postgres:
    image: postgres:16.4
    container_name: mindora_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-100}
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-256MB}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ${MINDORA_DATA_ROOT}/postgres:/var/lib/postgresql/data
      - ../init/postgres:/docker-entrypoint-initdb.d
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis缓存
  redis:
    image: redis:7.4-alpine
    container_name: mindora_redis
    command: |
      redis-server --requirepass ${REDIS_PASSWORD} 
      --maxmemory ${REDIS_MAXMEMORY:-512mb}
      --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      --appendonly yes
      --save 900 1 --save 300 10 --save 60 10000
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - ${MINDORA_DATA_ROOT}/redis:/data
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # MinIO对象存储
  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    container_name: mindora_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: ${MINIO_SERVER_URL:-http://localhost:9000}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-http://localhost:9001}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - ${MINDORA_DATA_ROOT}/minio:/data
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:4.1-management
    container_name: mindora_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE:-rabbitmq_cookie_dev}
    ports:
      - "${RABBITMQ_AMQP_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - ${MINDORA_DATA_ROOT}/rabbitmq:/var/lib/rabbitmq
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Elasticsearch搜索引擎
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.19.2
    container_name: mindora_elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=${ELASTIC_CLUSTER_NAME:-mindora-cluster}
      - node.name=${ELASTIC_NODE_NAME:-mindora-node-1}
      - xpack.security.enabled=${ELASTIC_SECURITY_ENABLED:-false}
      - "ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms1g -Xmx1g}"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_HTTP_PORT:-9200}:9200"
      - "${ELASTICSEARCH_TRANSPORT_PORT:-9300}:9300"
    volumes:
      - ${MINDORA_DATA_ROOT}/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Qdrant向量数据库
  qdrant:
    image: qdrant/qdrant:v1.15.3
    container_name: mindora_qdrant
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "6334:6334"
    volumes:
      - ${MINDORA_DATA_ROOT}/qdrant:/qdrant/storage
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/6333"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Consul服务发现
  consul:
    image: hashicorp/consul:1.19
    container_name: mindora_consul
    command: consul agent -dev -client=0.0.0.0 -ui -log-level=INFO
    environment:
      CONSUL_BIND_INTERFACE: eth0
    ports:
      - "${CONSUL_HTTP_PORT:-8500}:8500"
      - "${CONSUL_DNS_PORT:-8600}:8600/udp"
    volumes:
      - ${MINDORA_DATA_ROOT}/consul:/consul/data
      - ../configs/consul:/consul/config
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: mindora_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-30d}'
      - '--storage.tsdb.retention.size=${PROMETHEUS_RETENTION_SIZE:-10GB}'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ../configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana可视化
  grafana:
    image: grafana/grafana:11.3.0
    container_name: mindora_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SMTP_ENABLED: ${GRAFANA_SMTP_ENABLED:-false}
      GF_SMTP_HOST: ${GRAFANA_SMTP_HOST:-}
      GF_SMTP_USER: ${GRAFANA_SMTP_USER:-}
      GF_SMTP_PASSWORD: ${GRAFANA_SMTP_PASSWORD:-}
      GF_LOG_LEVEL: ${LOG_LEVEL:-info}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - ${MINDORA_DATA_ROOT}/grafana:/var/lib/grafana
      - ../configs/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - mindora_network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kibana日志分析
  kibana:
    image: docker.elastic.co/kibana/kibana:8.19.2
    container_name: mindora_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: ""
      ELASTICSEARCH_PASSWORD: ""
      LOGGING_QUIET: true
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    volumes:
      - ${MINDORA_DATA_ROOT}/kibana:/usr/share/kibana/data
    networks:
      - mindora_network
    restart: unless-stopped
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx反向代理 (开发环境可选)
  nginx:
    image: nginx:1.27-alpine
    container_name: mindora_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../configs/nginx/conf.d:/etc/nginx/conf.d:ro
      - ${MINDORA_DATA_ROOT}/nginx/logs:/var/log/nginx
    networks:
      - mindora_network
    restart: unless-stopped
    depends_on:
      - grafana
      - kibana
      - consul
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - nginx  # 使用 --profile nginx 启动

networks:
  mindora_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
    driver: local