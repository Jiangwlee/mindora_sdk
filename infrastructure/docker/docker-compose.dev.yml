version: '3.8'

services:
  # 数据库服务
  postgres:
    image: postgres:15
    container_name: mindora_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ${MINDORA_DATA_ROOT}/postgres:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: mindora_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - ${MINDORA_DATA_ROOT}/redis:/data
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MinIO对象存储
  minio:
    image: minio/minio:RELEASE.2024-01-01T00-00-00Z
    container_name: mindora_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ${MINDORA_DATA_ROOT}/minio:/data
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: mindora_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ${MINDORA_DATA_ROOT}/rabbitmq:/var/lib/rabbitmq
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch搜索引擎
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mindora_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ${MINDORA_DATA_ROOT}/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant向量数据库
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: mindora_qdrant
    ports:
      - "6333:6333"
    volumes:
      - ${MINDORA_DATA_ROOT}/qdrant:/qdrant/storage
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consul服务发现
  consul:
    image: hashicorp/consul:1.17
    container_name: mindora_consul
    command: consul agent -dev -client=0.0.0.0 -ui
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - ${MINDORA_DATA_ROOT}/consul:/consul/data
    networks:
      - mindora_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: mindora_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${MINDORA_DATA_ROOT}/prometheus:/prometheus
    networks:
      - mindora_network
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:10.2.0
    container_name: mindora_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    volumes:
      - ${MINDORA_DATA_ROOT}/grafana:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - mindora_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Kibana日志分析
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mindora_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - mindora_network
    restart: unless-stopped
    depends_on:
      - elasticsearch

networks:
  mindora_network:
    driver: bridge